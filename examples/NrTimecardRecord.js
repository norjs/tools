/**
 * NOTE! This file has been auto generated by norjs-db-model-generator and is not recommended to be edited directly.
 * 
 * If you need non-standard customizations, you should extend your own class from this and override 
 * your changes.
 *
 * @file
 */

import AssertUtils from "@norjs/utils/Assert";
import DateUtils from "@norjs/utils/Date";
import NrDatabaseType from "@norjs/ui/models/NrDatabaseType";
import _ from "lodash";

/**
 * Model class property names
 * 
 * @enum {string}
 * @readonly
 */
export const NrTimecardRecordProperty = {
    ID : 'id',
    VERSION : 'version',
    CREATED : 'created',
    MODIFIED : 'modified',
    USER_ID : 'userId',
    PROJECT_ID : 'projectId',
    START_TIME : 'startTime',
    END_TIME : 'endTime',
    LUNCH_MINUTES : 'lunchMinutes',
    DESCRIPTION : 'description',
    DELETED : 'deleted'
};

/**
 * Database table column names
 * 
 * @enum {string}
 * @readonly
 */
export const NrTimecardRecordColumn = {
    ID : 'id',
    VERSION : 'version',
    CREATED : 'created',
    MODIFIED : 'modified',
    USER_ID : 'user_id',
    PROJECT_ID : 'project_id',
    START_TIME : 'start_time',
    END_TIME : 'end_time',
    LUNCH_MINUTES : 'lunch_minutes',
    DESCRIPTION : 'description',
    DELETED : 'deleted'
};

/**
 * Database table types
 * 
 * @enum {NrDatabaseType}
 * @readonly
 */
export const NrTimecardRecordType = {
    ID : NrDatabaseType.UUID,
    VERSION : NrDatabaseType.INT,
    CREATED : NrDatabaseType.TIMESTAMPTZ,
    MODIFIED : NrDatabaseType.TIMESTAMPTZ,
    USER_ID : NrDatabaseType.UUID,
    PROJECT_ID : NrDatabaseType.UUID,
    START_TIME : NrDatabaseType.TIMESTAMPTZ,
    END_TIME : NrDatabaseType.TIMESTAMPTZ,
    LUNCH_MINUTES : NrDatabaseType.INT,
    DESCRIPTION : NrDatabaseType.TEXT,
    DELETED : NrDatabaseType.BOOLEAN
};

/**
 *
 * @implements {NrModel}
 */
export class NrTimecardRecord {

    /**
     *
     * @returns {string}
     */
    static get nrName () {
        return "NrTimecardRecord";
    }
    
    /**
     * @returns {typeof NrTimecardRecordProperty}
     */
    static get Property () {
        return NrTimecardRecordProperty;
    }

    /**
     * @returns {typeof NrTimecardRecordType}
     */
    static get Type () {
        return NrTimecardRecordType;
    }

    /**
     * @returns {typeof NrTimecardRecordColumn}
     */
    static get Column () {
        return NrTimecardRecordColumn;
    }

    /**
     *
     * @param id {string}
     * @param version {number}
     * @param created {string}
     * @param modified {string}
     * @param userId {string}
     * @param projectId {string}
     * @param startTime {string}
     * @param endTime {string|undefined}
     * @param lunchMinutes {number}
     * @param description {string}
     * @param deleted {boolean}
     */
    constructor ({
        id,
        version,
        created,
        modified,
        userId,
        projectId,
        startTime,
        endTime,
        lunchMinutes,
        description,
        deleted
    }) {
    
        AssertUtils.isUuidString(id);
        AssertUtils.isNumber(version);
        AssertUtils.isDateString(created);
        AssertUtils.isDateString(modified);
        AssertUtils.isUuidString(userId);
        AssertUtils.isUuidString(projectId);
        AssertUtils.isDateString(startTime);
        if ( endTime !== undefined ) AssertUtils.isDateString(endTime);
        AssertUtils.isNumber(lunchMinutes);
        AssertUtils.isString(description);
        AssertUtils.isBoolean(deleted);
        
        /**
         *
         * @member {string}
         * @private
         */
        this._id = id;

        /**
         *
         * @member {number}
         * @private
         */
        this._version = version;

        /**
         *
         * @member {string}
         * @private
         */
        this._created = created;

        /**
         *
         * @member {string}
         * @private
         */
        this._modified = modified;

        /**
         *
         * @member {string}
         * @private
         */
        this._userId = userId;

        /**
         *
         * @member {string}
         * @private
         */
        this._projectId = projectId;

        /**
         *
         * @member {string}
         * @private
         */
        this._startTime = startTime;

        /**
         *
         * @member {string|undefined}
         * @private
         */
        this._endTime = endTime;

        /**
         *
         * @member {number}
         * @private
         */
        this._lunchMinutes = lunchMinutes;

        /**
         *
         * @member {string}
         * @private
         */
        this._description = description;

        /**
         *
         * @member {boolean}
         * @private
         */
        this._deleted = deleted;

    }

    // noinspection JSUnusedGlobalSymbols
    /**
     *
     * @returns {string}
     */
    get nrName () {
        return this.Class.nrName;
    }

    /**
     *
     * @returns {typeof NrTimecardRecord}
     */
    get Class () {
        return NrTimecardRecord;
    }

    /**
     *
     * @returns {string}
     */
    get id () {
        return this._id;
    }

    /**
     *
     * @returns {number}
     */
    get version () {
        return this._version;
    }

    /**
     *
     * @returns {string}
     */
    get created () {
        return this._created;
    }

    /**
     *
     * @returns {string}
     */
    get modified () {
        return this._modified;
    }

    /**
     *
     * @returns {string}
     */
    get userId () {
        return this._userId;
    }

    /**
     *
     * @returns {string}
     */
    get projectId () {
        return this._projectId;
    }

    /**
     *
     * @returns {string}
     */
    get startTime () {
        return this._startTime;
    }

    /**
     *
     * @returns {string|undefined}
     */
    get endTime () {
        return this._endTime;
    }

    /**
     *
     * @returns {number}
     */
    get lunchMinutes () {
        return this._lunchMinutes;
    }

    /**
     *
     * @returns {string}
     */
    get description () {
        return this._description;
    }

    /**
     *
     * @returns {boolean}
     */
    get deleted () {
        return this._deleted;
    }

    /**
     *
     * @returns {Object}
     */
    valueOf () {
        return {
            id : this._id,
            version : this._version,
            created : this._created,
            modified : this._modified,
            userId : this._userId,
            projectId : this._projectId,
            startTime : this._startTime,
            endTime : this._endTime !== undefined ? this._endTime : null,
            lunchMinutes : this._lunchMinutes,
            description : this._description,
            deleted : this._deleted
        };
    }

    /**
     *
     * @returns {Object}
     */
    toJSON () {
        return this.valueOf();
    }

    /**
     *
     * @param value {*}
     * @returns {NrTimecardRecord}
     */
    static parseValue (value) {

        if ( !value ) {
            throw new TypeError(`${ this.nrName }.parseValue(): value was not defined`);
        }

        if ( value instanceof NrTimecardRecord ) {
            return value;
        }

        if ( value.type !== this.nrName ) {
            throw new TypeError(`${ this.nrName }.parseValue(): value's type is not correct: "${ value.type }"`);
        }

        const {
            id,
            version,
            created,
            modified,
            userId,
            projectId,
            startTime,
            endTime,
            lunchMinutes,
            description,
            deleted
        } = value;

        return new NrTimecardRecord({
            id : id,
            version : version,
            created : DateUtils.parseToString(created),
            modified : DateUtils.parseToString(modified),
            userId : userId,
            projectId : projectId,
            startTime : DateUtils.parseToString(startTime),
            endTime : !_.isNil(endTime) ? DateUtils.parseToString(endTime) : undefined,
            lunchMinutes : lunchMinutes,
            description : description,
            deleted : deleted
        });

    }

}

// noinspection JSUnusedGlobalSymbols
export default NrTimecardRecord;
